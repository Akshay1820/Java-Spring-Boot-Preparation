Java Basics and OOPS


What is JDK:-
    Stands for Java devlopment tool kit.

JVM:-
    Stands for Java Virtual Machine
    Java is platform independent because of the JVM, But JVM is platform dependent.
        i.e Different OS will have different JVM.

    If we have to run a java application we need a JVM installed.

    Java applications are called WORA (Write once runs anywhere)


How Java works behind the scene:-
    1. We as devloper write a code, to right a code we need IDE,Code editor.
    2. JVM is resposnible to run our java application. It cant understand the source code directly, because JVM only understand byte code.
    3. So to run our code in JVM, first we have to compile to byte code.
    4. For compliation, in JDK we get javac which is responsible to compile the source code to byte code.
    5. After java compiler compiles the code JVM can now understand it and tried to run it.
    6. Lets suppose in our application or code, we have use some extra classes or method which might required some extra libraries. So along with JVM there is another concept called JRE comes into picture.
    7. JRE(Java Runtime Environment) contains JVM and some extra libraries. JRE provides a run time environment to execute Java application.
    8. As our application may contains 100 files JVM is only looking for one file which having main method.
    9. The file that includes the main method is starting point of our application.


    Build in Packages in Java
    lang:- String,StringBuffer,System
    util:- Contains collection framework like Arrays,ArrayList,Map,HashMap etc


    JVM Architecture:-
        JVM or Java Virtual Machine is the core component of java which enables platform independence.

        Following are the components of JVM 
        
        1. Class Loader
        2. JVM Memory
            a. Method area
            b. Heap
            c. Stack
            d. Program Counter (PC) Register
        3. Execution engine
    
        Explanation:-
            1. Class Loader:- When we write a code in .java file, java compiler compiles that source code into byte code and then JVM picks the .class file to run it.
                              Class Loader is responsible to perform three major tasks
                                 a. Loading
                                 b. Linking
                                 c. Intilizing

                                 a. Loading:- It reads the .class file and generate the binary data i.e 0's and 1's. It saves some basic info in the Method area.
                                              Information like Name of the fully qualified class or parent class if present,whether the .class file is related to an interface or enum.

                                 b. Linking:- Linking perfroms three operations
                                            i.Verification:- Verifies whether the .class file is in correct format if not we get runtime excetion which belongs to java.lang.VerifyError             
                                            ii. Preparation:- Allocates memory for static members.
                                            ii. Resolutions:- 

                                 c. Intilizing:- It assigs the values to static members,it executes from top to bottom

            2. Java Memory:-
                a. Method area:- Store class level information like class name its parent class name, methods variable name. It is a shared resource.

                b. Heap area:- The runtime data area where objects and instance variables are stored.It is also shared among all threads and is managed by the Garbage Collector.

                c. Stack:- 
                        For every method JVM creates its own stack called stack frame. It stores the method call. All the local variable are stored in their respected stack frame.
                        After the method completes, JVM destory the stack fram

            
            3. Execution Engine:- Responsible for executing bytecode. It is classified into 3 parameters

                a. Interpreter :- Interpret byte code line by line. Disadvantage is if a functional call multiple times it interpret multiple times.
                b. JIT compiler:- Increases efficiency of Interpreter by converting the frequently repeated code into native code.
                c. Garbage collector:- The object which is there in memory and not being user the garbage collector removes that object.
                

            4.Native Method Interface (JNI):- Provides a way for java to interact with native application which are written in C/C++



Class & Objects:-
    Class:- Class is like a template or a sturcture which defines properties (attributes) or behaviour (methods) of an object.

    Object :- An object is an instance of the class that are created to use the attributes and methods of a class. Memory allocation is done as soon as object is created.

    psvm (public static void main):- It is the entry point of any program.
                        public:- this method can accessible from anywhere.
                        static:- we can call this method without creating object of the class.
                        void:- This method don't return anything
                        main:- name of the method


   
    
    Static:- In Java, the static keyword is used to indicate that a member belongs to the class itself, 
            rather than to instances of the class.

            1. Static members are shared across all instances.
            2. They can be accessed without creating an object of the class.
            3. Static methods cannot used non-static data members or call non static methods directly.
            4. Static block executes as soon as JVM loads the class.

        Use cases:-
            1. To minimize memory:- as multiple instance will use single copy of a data member. It requires less memory.
            2. To handle some exeception before it breaks your code:- As we know static block executes even before constructor loads so if we want to check some operations like
                                database connection we can use static block.

            3. Helper or Utility class:- In Helper class as we mentioned methods or data members,
                                 that we want to user multiple times anywhere in a project.
                                 we can use static methods.
        


Variable:-
    1. Variables are used as container to store the data or values temporary.
    2. To declare a variable we have to sepecify the data type of the variable as java is Strongly types language.


    Instance variable:- Variables that are created within the class called as instance variable.

    Local variables:- Variables that are created inside a method or a constructor called local variables.



Data Types:-
    1. Data type is the format in which we have to store our data and values.
    2.Mostly there are two types 
         a. Primitive types
         b. Non Primitive types

    Primitive types:-
        They are basic and inbuild data types.

        Integer:-
            byte:- 1 byte   -128 to 127.
            short:- 2 byte   -32,768 to 32,767.
            int:-  4 byte  (default)  2,147,483,648 to 2,147,483,647.
            long:- 8 bytes   -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807.

        Floating:- 
            float:- 4 byte  (less precision i.e after point can store less numbers than double)         
            double:- 8 byte (default)

        Character:-
            char:- 2 bytes

        Boolean:-
            boolean:- values are true,false
    
    if we want to specify long data type after the value we have to mention 'l' because by default in consider int.

    similary for floar we have to mention 'f' after the value as it consider double as bydefault type.
            

Type Conversion and Type Casting:-
    Type Conversion:- Whenever the conversion of one data type to another data type happens implicitly then it is called Type conversion.
    For eg:-
    Range of byte is -128 to +127
    so if we assign byte variable to int varible, It will be okay
        byte a =56
        int b=a;
        this can be done as there will be no data loss here

    Type Casting:- 
        When we convert the one data type into other explicitly, then it is called Type casting.
        Here chances of data lossing increase.

        For eg :-
            float a = 7.6
            int b= a;

            So here, we cant assign float variable a to int variable b due to decimal value.
            But if we want to convert it wilingly then
            
            int b= (int)a;
            here we are explicitly converting into int data type 
            so at the end the output will be b=7 as we will loss the .6 value due to type casting.

Arithmatic Operation:-

    So in Java we have operators like + - * / %

    For addition:- a + b
    For substraction:- a - b
    For Multiplication:- a * b
    For Division to get quotient :- a / b
    For Division to get remainder :- a % b

    Eg:-
        num=5;
        num++ :-Post increment
        +numm :- Pre increment

        Both of the operation will give same output 6 if they are use as individual statement

        but we get different output if we assign the num value into another variable

        int result = num ++ :- 5   :- Here first value is assigned to the result variable and then num is incremented
        int result = ++num :- 6   :- Here first the  num is incremented and then it is assigned to the result


Relational Operation

    < :- less than

    > : greater than

    <=: less than and equal to

    >=: greater than and equal to

    == :- equal to

    != :- not equal to




Method Overloading:-
     same method name but different parameters.


Stack and Heap:-
    
    Stack:-
        The local variable are store inside the Stack.
        as soon as we create a variable and assign a value to it
        for eg:- int data=5;
        So the 'data' variable will be stored inside the stack with key value pair

        What if happen to Refrence variable
        Eg:- Student st1=new Student;
        So the refrence variable st1 is store in stack as key and the value of it will be memory address 
        of heap memory where the object is actual stored,

        
    Heap:- 
        Stores actual objects,array.
        Manages my garbage collector.
        Lives longer until garbage collector not destory it.


Method Overloading:-
    Same method name with different parameters


In java Strings are immutable. But we can achived it using StringBuffer and StringBuilder



OOP (Object Oriented Programming):-

    Encapsulation:- 
        Encapsulation means bundling the data (variables) and the operations(Getters & Setters) into a single unit (Class).
        It also involves restricting direct access to some of the object's components, 
        which is usually done using access modifiers.

        Access modifiers:-
        public:- Accessible from anywhere – any class in any package.
        private:- Accessible only within the same class. Not visible to other classes, not even subclasses.
        protected:- Accessible within the same package and in subclasses (even if they are in different packages).
        default:- Accessible only within the same package. Also known as package-private.


    'This' keyword:-
        It used to refer the current object or current instance who is performing the action.

        Problem:-
            When instance variable and method parameters have same name, by default java will assume we are referring the parameters.
            So whatever operation we perform it will only affect the parameter or local variale not the instance variable.

        So to solve this problem, 'this' keyword is used to refers the current object (Object that calls the method).   
    
    'This' method:-
        this():- Excutes the constructor of the same class 
                This concept is called as constructor chaining

    Constructor:-
        A constructor is nothing but a special type of method is invoked as soon as object is created using 'new' keyword.
        Its purpose is to initialize the object. Constructors don't have a return type, not even void, and their name matches the class name.                    
    
    'super' keyword:-
        This method is used to call constructor of parent class.It is there in each constructor even if we not mentioned.
        It calls its super class constructor unless it reached upto Object class.


    Inheritence:-
        It is a core concept of OOP which allows a child or Derived class to inherit or aquries the properties and behaviour of Parent or Base class.
        This promotes code reusability, improves maintainability, and supports polymorphism.

        Types Of Inheritence:-
            Single Level
            MultiLevel
            Herirarchical
            Hybrid :- Comination of all inheritence

        Advantages:-
            Reduce Code duplication    

     Polymorphism :-
        The word is derived from 2 Greek words that are Poly:- Many and morphism:- forms:-
        So we can say pollymorphism allows the same action or behaviour to be erform in different ways.
        based on object which is calling it.

        Two types of Polymorphism:-
            Compile time :- Method Overloading
            Run Time :- Method Overiding      


    'Final' Keyword:-
        Final class:- We cant extend base class to other class
        Final method:- we can't do method overiding 
        Final variable:- we can't change the value of the varible after assigned


    Abstraction:-
        It refers to the concept of hiding internal implementation details and showing only the essential features
        It is implemented using abstract classes and interfaces.

    'Abstract' Keyword
        If we make a method abstract its compulsory that it belongs to abstract class.
        But vice versa it is not mandatory the Abstract class should only have abstract methods, it can have implement methods as well
        thats why it is called 'parial' abstraction.
    
        If we achived abstraction through interface it is 'fully' abstraction. As methods inside interface are abstract by default.
     

     Anonymous Inner Class :- An Anonymous Inner cllas in Java is a class without a name that is declared and instantiated in a Signle expression.
                              It is typically used to provide a one time implementation of an interface or abstract class- usually when the implementation is short and used only once.


     Interface:- An interface in Java is a reference type that defines a set of abstract methods that a class must implement.
                By using interfaces, we achieve abstraction and also support multiple inheritance of type, since a class can implement multiple interfaces

                * All methods in interface are by default public and abstract
                * All variables in interfaces are final and static 

        Why we need Interface:-
            We need interfaces in Java primarily to achieve abstraction and loose coupling in our applications.
            Interfaces allow us to define a contract for what a class should do, without dictating how it should do it. This makes our code more flexible, maintainable, and scalable.
                                

Enums:- 
    Enums are set of named constants.
    Enums are type-safe, meaning you can’t assign values outside the defined constants.
    Internally, enums are implemented as classes in Java and can have fields, constructors, and methods.


 Annotations:-

    @Overide:-
        When we were implementing  method overiding, the method name should be matched, it dont give a error during compile time,
         but it might get affected at run time. So @Overide annoation informs Java compiler to check whether the method belongs to its base
         class or not, if not hilight the issue, so it will inform us that method name are not matching for overiding during compile time only.   

    @FunctionalInterface:- By mentioning this annotation Compiler make sure that the interface will have only one abstract method.

Types of Interface:-
    Normal interfaces:- Interfaces having abstract methods
    Functional interface:- Interface that have only one abstract method. Also called as SAM(Single Abstract Method)



Exceptions:- In Java, exceptions are events that disrupt the normal flow of a program during runtime.
             Java provides a robust exception handling mechanism using try-catch-finally blocks to gracefully handle such errors without crashing the application.

            All exceptions are derived from the Throwable class, which has two main branches:

                Exception – for conditions that programs should catch and handle.
                Error – for serious issues like memory leaks or JVM crashes, which should not be handled by the application.

            Types of errors:-
                Compile time error:- Syntax worng
                Run time error:- Null pointer exceptions
                Logical error

        Types of Exceptions:
            Checked Exceptions
                Compiler makes us mandatory to handle these exception at comile time only
                Example: IOException, SQLException.
                Must be either caught using a try-catch block or declared with throws.
            Unchecked Exceptions
                Occur at runtime and not checked at compile-time.
                It is not mandatory to handle such kind of exceptions
                Example: NullPointerException, ArrayIndexOutOfBoundsException.
                Extend from RuntimeException.

    'throw' Keyword:- This keyword is used to mannually throw the exception intentionally even if JVM does not throw.
                      We can throw an Exception explicitly when we want to validate the data.

     'throws' Keyword:- In Java, the throws keyword is used in a method declaration to indicate that the method might throw one or more exceptions,
                         and it is the caller’s responsibility to handle or declare those exceptions.
                       It's mainly used with checked exceptions, which must either be caught using try-catch or 
                       declared using throws.                             



 Collection API:-
    The Collection API in Java is a set of classes and interfaces that provide a standard way to store, access, and 
    manipulate groups of objects — like lists, sets, and maps.                      

    Key Interfaces in the Collection API:
        Collection – root interface for working with groups of objects (List, Set, Queue).
        List – ordered collection (e.g., ArrayList, LinkedList).
        Set – collection with no duplicate elements (e.g., HashSet, TreeSet).
            HashSet:- Order is not followed
            TreeSet:- Sort the values by default
        Queue – used for FIFO operations (e.g., PriorityQueue, LinkedList).
        Map – stores key-value pairs (e.g., HashMap, TreeMap) — not a subtype of Collection but part of the Collections framework. 
                Keys in Map are unique